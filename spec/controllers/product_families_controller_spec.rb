require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe ProductFamiliesController do
  render_views

  describe "GET index" do
    
    describe "as a non-admin user" do
       before(:each) do
         @user = Factory(:user)
       end

       it "should protect the page" do
         test_sign_in(@user)
         get 'index'
         response.should redirect_to(root_path)
       end
    end
    
    describe "as a non-logged in user" do 
      it "should protect the page" do 
        get 'index'
        response.should redirect_to(signin_path)
      end
    end
    
    describe "as an admin user" do 
      before(:each) do
        @user = Factory(:user)
        @user.toggle!(:admin)
        @user = test_sign_in(@user)
        first = Factory(:product_family, :name => Faker::Name.name)
        second = Factory(:product_family, :name => Faker::Name.name)
        third  = Factory(:product_family, :name => Faker::Name.name)
        @families = [first, second, third]
        30.times do
          @families << Factory(:product_family, :name => Faker::Name.name)
        end
        @families = @families.sort_by { |f| f.name }
      end

      it "should be successful" do
        get :index
        response.should be_success
      end

      it "should have the right title" do
        get :index
        response.should have_selector("title", :content => "All Product Families")
      end
      
      # it "should have an element for product family" do
      #   get :index
      #   @families[0..2].each do |fam|
      #     response.should have_selector("li", :content => "#{fam.name}")
      #   end
      # end
      
      it "should paginate families" do
         get :index
         response.should have_selector("div.pagination")
         response.should have_selector("span.disabled", :content => "Previous")
         response.should have_selector("a", :href => "/product_families?page=2",
                                            :content => "2")
         response.should have_selector("a", :href => "/product_families?page=2",
                                            :content => "Next")
      end
      
    end

  end
  
  describe "GET 'new'" do
    describe "for admin users" do 
      before(:each) do
        @user = Factory(:user)
        @user.toggle!(:admin)
        @user = test_sign_in(@user)
      end
      
      it "should be successful" do
        get 'new'
        response.should be_success
      end
  
      it "should have the right title" do
        get 'new'
        response.should have_selector("title", :content => "New Product Family")
      end 
      
    end
    
    describe "for non-logged in users" do 
      it "should protect the page" do 
        get 'new'
        response.should redirect_to(signin_path)
      end
    end
    
    describe "for non-admin users" do 
      before(:each) do 
        @user = Factory(:user)
        @user = test_sign_in(@user)
      end
      
      it "should protect the page" do 
        get 'new'
        response.should redirect_to(root_path)
      end
    end

  end
  
  describe "GET 'show'" do
    describe "for logged in users" do
      before(:each) do
        @user = Factory(:user)
        @user = test_sign_in(@user)
        @product_family = Factory(:product_family, :name => "Peppers")
      end

      it "should be successful" do
        get :show, :id => @product_family
        response.should be_success
      end

      it "should find the right product family" do
        get :show, :id => @product_family
        assigns(:product_family).should == @product_family
      end
     
      it "should have the right title" do
        get :show, :id => @product_family
        response.should have_selector("title", :content => "#{@product_family.name}")
      end

    end
    
    describe "for non-logged in users" do 
      it "should protect the page" do 
        @user = Factory(:user)
        @product_family = Factory(:product_family, :name => "Peppers")
        get :show, :id => @product_family
        response.should redirect_to(signin_path)
      end
    end
     
  end
  
  describe "POST 'create'" do
    
    describe "for admin users" do 

      describe "failure" do

        before(:each) do
          @user = Factory(:user)
          @user.toggle!(:admin)
          @user = test_sign_in(@user)
          @attr = { :name => "" }
        end

        it "should not create a product family" do
          lambda do
            post :create, :product_family => @attr
          end.should_not change(ProductFamily, :count)
        end

        it "should have the right title" do
          post :create, :product_family => @attr
          response.should have_selector("title", :content => "New Product Family")
        end

        it "should render the 'new' page" do
          post :create, :product_family => @attr
          response.should render_template('new')
        end
      end
    
      describe "success" do

        before(:each) do
          @user = Factory(:user)
          @user.toggle!(:admin)
          @user = test_sign_in(@user)
          @attr = { :name => "Tomatoes" }
        end

        it "should create a product family" do
          lambda do
            post :create, :product_family => @attr
          end.should change(ProductFamily, :count).by(1)
        end

        it "should redirect to the product family index page" do
          post :create, :product_family => @attr
          response.should redirect_to(product_families_path)
        end  
     end
    end
    
    describe "for non-admin users" do 
      
      before(:each) do 
        @user = Factory(:user)
        @user = test_sign_in(@user)
        @attr = { :name => "Tomatoes" }
      end
      
      it "should protect the page" do 
        post :create, :product_family => @attr
        response.should redirect_to(root_path)
      end
   end
   
   describe "for non-logged in users" do 
     before(:each) do 
       @attr = { :name => "Tomatoes" }
     end
      
      it "should protect the page" do 
        post :create, :product_family => @attr
        response.should redirect_to(signin_path)
      end
    
   end
    
  end
  
  describe "GET 'edit'" do

    describe "for admin users" do 
      before(:each) do
        @user = Factory(:user)
        @user.toggle!(:admin)
        test_sign_in(@user)
        @product_family = Factory(:product_family, :name => "Peppers")
      end

      it "should be successful" do
        get :edit, :id => @product_family
        response.should be_success
      end

      it "should have the right title" do
        get :edit, :id => @product_family
        response.should have_selector("title", :content => "Edit Product Family")
      end
    end 
    
    describe "for logged in users" do 
      before(:each) do
        @user = Factory(:user)
        test_sign_in(@user)
        @product_family = Factory(:product_family, :name => "Peppers")
      end
      
      it "should protect the page" do 
        get :edit, :id => @product_family
        response.should redirect_to(root_path)
      end
    end
    
    describe "for non-logged in users" do 
      before(:each) do
        @product_family = Factory(:product_family, :name => "Peppers")
      end
      
      it "should protect the page" do 
        get :edit, :id => @product_family
        response.should redirect_to(signin_path)
      end
    end
  end
  
  describe "PUT 'update'" do

    describe "for admin users" do 
      before(:each) do
        @user = Factory(:user)
        @user.toggle!(:admin)
        test_sign_in(@user)
      end

      describe "failure" do

        before(:each) do
          @attr = { :name => "" }
          @product_family = Factory(:product_family, :name => "Peppers")
        end

        it "should render the 'edit' page" do
          put :update, :id => @product_family, :product_family => @attr
          response.should render_template('edit')
        end

        it "should have the right title" do
          put :update, :id => @product_family, :product_family => @attr
          response.should have_selector("title", :content => "Edit Product Family")
        end

      end

      describe "success" do

        before(:each) do
          @attr = { :name => "Tomatoes" }
          @product_family = Factory(:product_family, :name => "Peppers")
        end

        it "should change the product family's attributes" do
          put :update, :id => @product_family, :product_family => @attr
          @product_family.reload
          @product_family.name.should  == @attr[:name]
        end

        it "should redirect to the product family index page" do
          put :update, :id => @product_family, :product_family => @attr
          response.should redirect_to(product_families_path)
        end

        it "should have a flash message" do
          put :update, :id => @product_family, :product_family => @attr
          flash[:success].should =~ /updated/
        end
      end
    end
    
    describe "for non-admin users" do 
      before(:each) do
        @user = Factory(:user)
        test_sign_in(@user)
        @product_family = Factory(:product_family, :name => "Peppers")
        @attr = { :name => "Tomatoes" }
      end
      
      it "should protect the page" do 
        put :update, :id => @product_family, :product_family => @attr
        response.should redirect_to(root_path)
      end
    end
    
    describe "for non-logged in users" do 
      before(:each) do
        @product_family = Factory(:product_family, :name => "Peppers")
        @attr = { :name => "Tomatoes" }     
      end
      
      it "should protect the page" do 
        put :update, :id => @product_family, :product_family => @attr
        response.should redirect_to(signin_path)
      end
    end
  end
  
  describe "DELETE 'destroy'" do

    before(:each) do
      @user = Factory(:user)
      @product_family = Factory(:product_family, :name => "Peppers")
    end

    describe "as a non-signed-in user" do
      it "should deny access" do
        delete :destroy, :id => @product_family
        response.should redirect_to(signin_path)
      end
    end

    describe "as a non-admin user" do
      it "should protect the page" do
        test_sign_in(@user)
        delete :destroy, :id => @product_family
        response.should redirect_to(root_path)
      end
    end

    describe "as an admin user" do

      before(:each) do
        admin = Factory(:user, :email => "admin@example.com", :admin => true)
        test_sign_in(admin)
      end

      it "should destroy the product family" do
        lambda do
          delete :destroy, :id => @product_family
        end.should change(ProductFamily, :count).by(-1)
      end

      it "should redirect to the product family list" do
        delete :destroy, :id => @product_family
        response.should redirect_to(product_families_path)
      end
      
      it "should not destroy the product family when it has products in it" do 
        product = Factory(:product)
        product.product_family = @product_family
        product.save!
        delete :destroy, :id => @product_family
        response.should redirect_to(product_family_path(@product_family))
        flash[:error].should =~ /contain products/
      end
    end
  end

end
