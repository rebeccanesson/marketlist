require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe ProductsController do
  render_views
  
  before(:each) do 
    User.all.each { |u| u.destroy }
  end

  describe "GET index" do
    
    describe "as a non-admin user" do
       before(:each) do
         @user = Factory(:user)
       end

       it "should protect the page" do
         test_sign_in(@user)
         get 'index'
         response.should redirect_to(root_path)
       end
    end
    
    describe "as a non-logged in user" do 
      it "should protect the page" do 
        get 'index'
        response.should redirect_to(signin_path)
      end
    end
    
    describe "as an admin user" do 
      before(:each) do
        @user = Factory(:user)
        @user.toggle!(:admin)
        @user = test_sign_in(@user)
        @product_family = Factory(:product_family, :name => "AAAAAAA")
        first = Factory(:product, :product_family => @product_family)
        second = Factory(:product, :name => "Bell Peppers", :product_family => @product_family)
        third  = Factory(:product, :name => "Italian Eggplant", :product_family => @product_family)
        @products = [first, second, third]
        30.times do
          @products << Factory(:product)
        end
      end

      it "should be successful" do
        get :index
        response.should be_success
      end

      it "should have the right title" do
        get :index
        response.should have_selector("title", :content => "All Products")
      end

      it "should have an element for each product" do
        get :index
        @products[0..2].each do |prod|
          response.should have_selector("li", :content => prod.name)
        end
      end
      
      it "should paginate products" do
         get :index
         response.should have_selector("div.pagination")
         response.should have_selector("span.disabled", :content => "Previous")
         response.should have_selector("a", :href => "/products?page=2",
                                            :content => "2")
         response.should have_selector("a", :href => "/products?page=2",
                                            :content => "Next")
      end
      
    end

  end
  
  describe "GET 'new'" do
    describe "for admin users" do 
      before(:each) do
        @user = Factory(:user)
        @user.toggle!(:admin)
        @user = test_sign_in(@user)
      end
      
      it "should be successful" do
        get 'new'
        response.should be_success
      end
  
      it "should have the right title" do
        get 'new'
        response.should have_selector("title", :content => "New Product")
      end 
      
      it "should set the list of product families" do 
        get 'new'
        assigns(:product_families).should == ProductFamily.find(:all, :order => "name ASC")
      end 
    end
    
    describe "for non-logged in users" do 
      it "should protect the page" do 
        get 'new'
        response.should redirect_to(signin_path)
      end
    end
    
    describe "for non-admin users" do 
      before(:each) do 
        @user = Factory(:user)
        @user = test_sign_in(@user)
      end
      
      it "should protect the page" do 
        get 'new'
        response.should redirect_to(root_path)
      end
    end

  end
  
  describe "GET 'show'" do
    describe "for logged in users" do
      before(:each) do
        @user = Factory(:user)
        @user = test_sign_in(@user)
        @product = Factory(:product)
      end

      it "should be successful" do
        get :show, :id => @product
        response.should be_success
      end

      it "should find the right product" do
        get :show, :id => @product
        assigns(:product).should == @product
      end
     
      it "should have the right title" do
        get :show, :id => @product
        response.should have_selector("title", :content => @product.name)
      end

      it "should include the product's name" do
        get :show, :id => @product
        response.should have_selector("h2", :content => @product.name)
      end

    end
    
    describe "for non-logged in users" do 
      it "should protect the page" do 
        @user = Factory(:user)
        @product = Factory(:product)
        get :show, :id => @product
        response.should redirect_to(signin_path)
      end
    end
     
  end
  
  describe "POST 'create'" do
    
    describe "for admin users" do 

      describe "failure" do

        before(:each) do
          @user = Factory(:user)
          @user.toggle!(:admin)
          @user = test_sign_in(@user)
          @attr = { :name => "", :description => ""}
        end

        it "should not create a product" do
          lambda do
            post :create, :product => @attr
          end.should_not change(Product, :count)
        end

        it "should have the right title" do
          post :create, :product => @attr
          response.should have_selector("title", :content => "New Product")
        end

        it "should render the 'new' page" do
          post :create, :product => @attr
          response.should render_template('new')
        end
      end
    
      describe "success" do

        before(:each) do
          @user = Factory(:user)
          @user.toggle!(:admin)
          @user = test_sign_in(@user)
          @product_family = Factory(:product_family, :name => "Tomatoes")
          @attr = { :name => "Slicing Tomatoes", :description => "red tomatoes",
                  :product_family => @product_family }
        end

        it "should create a product" do
          lambda do
            post :create, :product => @attr
          end.should change(Product, :count).by(1)
        end

        it "should redirect to the product show page" do
          post :create, :product => @attr
          response.should redirect_to(product_path(assigns(:product)))
        end  
     end
    end
    
    describe "for non-admin users" do 
      
      before(:each) do 
        @user = Factory(:user)
        @user = test_sign_in(@user)
       @attr = { :name => "Slicing Tomatoes", :description => "red tomatoes" }
      end
      
      it "should protect the page" do 
        post :create, :product => @attr
        response.should redirect_to(root_path)
      end
   end
   
   describe "for non-logged in users" do 
     before(:each) do 
       @attr = { :name => "Slicing Tomatoes", :description => "red tomatoes" }
      end
      
      it "should protect the page" do 
        post :create, :product => @attr
        response.should redirect_to(signin_path)
      end
    
   end
    
  end
  
  describe "GET 'edit'" do

    describe "for admin users" do 
      before(:each) do
        @user = Factory(:user)
        @user.toggle!(:admin)
        test_sign_in(@user)
        @product = Factory(:product)
      end

      it "should be successful" do
        get :edit, :id => @product
        response.should be_success
      end

      it "should have the right title" do
        get :edit, :id => @product
        response.should have_selector("title", :content => "Edit Product")
      end
      
      it "should set the list of product families" do 
        get 'new'
        assigns(:product_families).should == ProductFamily.find(:all, :order => "name ASC")
      end
    end 
    
    describe "for logged in users" do 
      before(:each) do
        @user = Factory(:user)
        test_sign_in(@user)
        @product = Factory(:product)
      end
      
      it "should protect the page" do 
        get :edit, :id => @product
        response.should redirect_to(root_path)
      end
    end
    
    describe "for non-logged in users" do 
      before(:each) do
        @product = Factory(:product)
      end
      
      it "should protect the page" do 
        get :edit, :id => @product
        response.should redirect_to(signin_path)
      end
    end
  end
  
  describe "PUT 'update'" do

    describe "for admin users" do 
      before(:each) do
        @user = Factory(:user)
        @user.toggle!(:admin)
        test_sign_in(@user)
      end

      describe "failure" do

        before(:each) do
          @attr = { :name => "", :description => "" }
          @product = Factory(:product)
        end

        it "should render the 'edit' page" do
          put :update, :id => @product, :product => @attr
          response.should render_template('edit')
        end

        it "should have the right title" do
          put :update, :id => @product, :product => @attr
          response.should have_selector("title", :content => "Edit Product")
        end

      end

      describe "success" do

        before(:each) do
          @attr = { :name => "New Product Name", :description => "edited description" }
          @product = Factory(:product)
        end

        it "should change the product's attributes" do
          put :update, :id => @product, :product => @attr
          @product.reload
          @product.name.should  == @attr[:name]
          @product.description.should == @attr[:description]
        end

        it "should redirect to the product show page" do
          put :update, :id => @product, :product => @attr
          response.should redirect_to(product_path(@product))
        end

        it "should have a flash message" do
          put :update, :id => @product, :product => @attr
          flash[:success].should =~ /updated/
        end
      end
    end
    
    describe "for non-admin users" do 
      before(:each) do
        @user = Factory(:user)
        test_sign_in(@user)
        @product = Factory(:product)
         @attr = { :name => "New Product Name", :description => "edited description" }     
      end
      
      it "should protect the page" do 
        put :update, :id => @product, :product => @attr
        response.should redirect_to(root_path)
      end
    end
    
    describe "for non-logged in users" do 
      before(:each) do
        @product = Factory(:product)
         @attr = { :name => "New Product Name", :description => "edited description" }     
      end
      
      it "should protect the page" do 
        put :update, :id => @product, :product => @attr
        response.should redirect_to(signin_path)
      end
    end
  end
  
  describe "DELETE 'destroy'" do

    before(:each) do
      @user = Factory(:user)
      @product = Factory(:product)
    end

    describe "as a non-signed-in user" do
      it "should deny access" do
        delete :destroy, :id => @product
        response.should redirect_to(signin_path)
      end
    end

    describe "as a non-admin user" do
      it "should protect the page" do
        test_sign_in(@user)
        delete :destroy, :id => @product
        response.should redirect_to(root_path)
      end
    end

    describe "as an admin user" do

      before(:each) do
        admin = Factory(:user, :email => "admin@example.com", :admin => true)
        test_sign_in(admin)
      end

      it "should destroy the product" do
        lambda do
          delete :destroy, :id => @product
        end.should change(Product, :count).by(-1)
      end

      it "should redirect to the product page" do
        delete :destroy, :id => @product
        response.should redirect_to(products_path)
      end
    end
  end

end
